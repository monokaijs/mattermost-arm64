# syntax=docker/dockerfile:1.7

##
## Builder (Go + Node) â€” builds server + webapp via Makefile
##
ARG GO_VERSION=1.24.5
FROM golang:${GO_VERSION}-bookworm AS builder

ENV CGO_ENABLED=1 \
    GOTOOLCHAIN=auto \
    NODE_OPTIONS=--max_old_space_size=4096 \
    NPM_CONFIG_FUND=false \
    NPM_CONFIG_AUDIT=false \
    CI=1 \
    npm_config_build_from_source=true

# Toolchain for webapp native deps + image optimizers
RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates curl git tzdata gnupg \
    make g++ python3 pkg-config \
    autoconf automake libtool nasm \
    gifsicle optipng pngquant libjpeg-dev zlib1g-dev \
 && curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \
 && apt-get install -y --no-install-recommends nodejs \
 && node --version && npm --version \
 && rm -rf /var/lib/apt/lists/*

WORKDIR /src

# Always pull latest default branch
RUN git clone --depth 1 https://github.com/mattermost/mattermost.git

# --- Pre-install webapp deps (including imagemin-* plugins) on ARM64 ---
WORKDIR /src/mattermost/webapp
# Use npm ci if lockfile fits; fall back to install if necessary
RUN (npm ci || npm install) \
 && npm install -D \
      imagemin-optipng \
      imagemin-mozjpeg \
      imagemin-gifsicle \
      imagemin-svgo

# --- Build server + webapp via official Makefile ---
WORKDIR /src/mattermost/server
RUN make build

##
## Runtime
##
FROM debian:bookworm-slim

# Non-root runtime user
RUN useradd -u 2000 -m mattermost

WORKDIR /opt/mattermost
RUN mkdir -p bin client config data logs plugins

# Copy artifacts from builder
COPY --from=builder /src/mattermost/server/bin/mattermost /opt/mattermost/bin/mattermost
COPY --from=builder /src/mattermost/webapp/dist            /opt/mattermost/client

# Minimal runtime deps
RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates tzdata \
 && rm -rf /var/lib/apt/lists/* \
 && chown -R mattermost:mattermost /opt/mattermost

# Defaults (override in compose/Coolify)
ENV MM_SQLSETTINGS_DRIVERNAME=postgres \
    MM_SQLSETTINGS_DATASOURCE="postgres://mmuser:mostest@db:5432/mattermost?sslmode=disable&connect_timeout=10" \
    MM_SERVICESETTINGS_SITEURL="" \
    MM_PLUGINSETTINGS_ENABLE=true

EXPOSE 8065
USER mattermost

ENTRYPOINT ["/opt/mattermost/bin/mattermost"]
CMD ["--listen-addr", ":8065"]
